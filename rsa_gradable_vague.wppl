///fold:
var marginalize = function(dist, key){
  return Infer({method: "enumerate"}, function(){
    return sample(dist)[key];
  })
}
///

var book = {
  "prices": [2, 6, 10, 14, 18, 22, 26, 30],
  "probabilities": [1, 2, 3, 4, 4, 3, 2, 1]
};

var statePrior = function() {
  return categorical(book.probabilities, book.prices);
};

var alpha = 10; // rationality parameter
console.log("Rationality is "+alpha);

var utterances = ["expensive", ""];
var cost = {
  "expensive": 0.2,
  "": 0
};
console.log("Difference in utterance cost is "+(cost["expensive"]-cost[""]));
var utterancePrior = function() {
  var uttProbs = map(function(u) {return Math.exp(-cost[u]) }, utterances);
  return categorical(uttProbs, utterances);
};

// Meaning is assumed to be probabilistic, cf:
// Emerson and Copestake (2016) "Functional Distributional Semantics"
// Sutton (2017) "Probabilistic Approaches to Vagueness and Semantic Competency"
var meaning = function(utterance, price) {
  if (utterance == "expensive") {
    var p = price/30
    return categorical([p,1-p], [true, false]);
  } else {
    return categorical([1,0], [true, false]);
  }
};

// The literal listener simply conditions on the utterance being true,
// returning a posterior distribution over prices
var literalListener = cache(function(utterance) {
  return Infer({method: "enumerate"}, function() {
    var price = statePrior();
    var truth = meaning(utterance, price);

    condition(truth);

    return price;
  });
});
console.log(literalListener(null))

// The basic speaker conditions on the literal listener inferring the correct price,
// returning a distribution over utterances.
var basicSpeaker = cache(function(price) {
  return Infer({method: "enumerate"}, function() {
    var utterance = utterancePrior();
    var inferred_price = sample(literalListener(utterance));
    
    condition(inferred_price == price);
    
    return utterance;
  });
});
console.log(basicSpeaker(2))

// The optimal speaker wants to optimise the probability of
// the literal listener making the correct inference about the price.
// Setting alpha to 0 is equivalent to using the basic speaker.
var optimalSpeaker = cache(function(price) {
  return Infer({method: "enumerate"}, function() {
    var utterance_dist = basicSpeaker(price);
    var utterance_sample = sample(utterance_dist);
    
    factor(alpha * (utterance_dist.score(utterance_sample)));
    
    return utterance_sample;
  });
});
console.log(optimalSpeaker(2))

// The pragmatic listener infers the state,
// assuming that the optimal speaker produced the utterance.
var pragmaticListener = function(utterance) {
  return Infer({method: "enumerate"}, function() {
    var price = statePrior();
    var utterance_sample = sample(optimalSpeaker(price));
    
    condition(utterance_sample == utterance);
    
    return price;
  });
};

var expensiveBook = pragmaticListener("expensive");
console.log("Pragmatic listener, on hearing 'expensive'");
console.log("Price:");
viz.auto(expensiveBook);

var nothing = pragmaticListener("");
console.log("Pragmatic listener, on hearing null");
console.log("Price:");
viz.auto(nothing);

var utt_dist = Infer({method: "enumerate"}, function() {
  var price = statePrior();
  var utterance = sample(optimalSpeaker(price))
  return utterance;
});
console.log("Optimal speaker");
console.log("Marginal distribution over utterances:");
viz.auto(utt_dist);

// Calculate the conditional probability of uttering "expensive", given a price
var price_utt_dist = Infer({method: "enumerate"}, function() {
  var price = statePrior();
  var utterance = sample(optimalSpeaker(price));
  return {price: price, utterance: utterance};
});
var expensive_conditional_prob = map(function(price) {
  var expensive_joint_prob = Math.exp(price_utt_dist.score({price: price, utterance: "expensive"}));
  var null_joint_prob = Math.exp(price_utt_dist.score({price: price, utterance: ""}));
  return expensive_joint_prob / (expensive_joint_prob + null_joint_prob);
}, book.prices);
console.log("Probability of uttering 'expensive':");
viz.bar(book.prices, expensive_conditional_prob);
